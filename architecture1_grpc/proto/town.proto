syntax = "proto3";

package town;

// ============ 基础消息类型 ============

message Empty {}

message Status {
    bool success = 1;
    string message = 2;
}

message Inventory {
    int32 money = 1;
    map<string, int32> items = 2;
}

message VillagerInfo {
    string name = 1;
    string occupation = 2;
    string gender = 3;
    string personality = 4;
    int32 stamina = 5;
    int32 max_stamina = 6;
    Inventory inventory = 7;
    int32 action_points = 8;
    bool has_slept = 9;
}

message GameTime {
    int32 day = 1;
    string time_of_day = 2;  // morning, noon, evening
}

// ============ 时间协调器服务 ============

message RegisterNodeRequest {
    string node_id = 1;
    string node_type = 2;  // coordinator, merchant, villager
    string address = 3;
}

message TimeAdvanceNotification {
    GameTime new_time = 1;
}

service TimeCoordinator {
    // 注册节点
    rpc RegisterNode(RegisterNodeRequest) returns (Status);
    
    // 获取当前时间
    rpc GetCurrentTime(Empty) returns (GameTime);
    
    // 推进时间（由协调器主动调用各节点）
    rpc AdvanceTime(Empty) returns (Status);
    
    // 获取所有注册节点
    rpc ListNodes(Empty) returns (NodeList);
}

message NodeList {
    repeated NodeInfo nodes = 1;
}

message NodeInfo {
    string node_id = 1;
    string node_type = 2;
    string address = 3;
}

// ============ 村民节点服务 ============

message CreateVillagerRequest {
    string name = 1;
    string occupation = 2;
    string gender = 3;
    string personality = 4;
}

message ProduceRequest {
    // 生产请求（根据职业自动判断）
}

message TradeRequest {
    string target_node = 1;  // 交易对象节点ID
    string item = 2;
    int32 quantity = 3;
    int32 price = 4;
}

message SleepRequest {
    // 睡眠请求
}

message TradeExecuteRequest {
    string action = 1;  // "pay", "refund", "add_item", "remove_item", "receive"
    string item = 2;
    int32 quantity = 3;
    int32 money = 4;
}

service VillagerNode {
    // 创建/初始化村民
    rpc CreateVillager(CreateVillagerRequest) returns (Status);
    
    // 获取村民信息
    rpc GetInfo(Empty) returns (VillagerInfo);
    
    // 执行生产
    rpc Produce(ProduceRequest) returns (Status);
    
    // 执行交易
    rpc Trade(TradeRequest) returns (Status);
    
    // 睡眠
    rpc Sleep(SleepRequest) returns (Status);
    
    // 时间推进通知（由协调器调用）
    rpc OnTimeAdvance(TimeAdvanceNotification) returns (Status);
    
    // 交易执行（由商人调用，用于原子操作）
    rpc TradeExecute(TradeExecuteRequest) returns (Status);
    
    // 消息系统
    rpc SendMessage(SendMessageRequest) returns (SendMessageResponse);
    rpc GetMessages(GetMessagesRequest) returns (GetMessagesResponse);
    rpc MarkMessagesRead(MarkMessagesReadRequest) returns (MarkMessagesReadResponse);
}

// ============ 商人节点服务 ============

message BuyFromMerchantRequest {
    string buyer_id = 1;
    string item = 2;
    int32 quantity = 3;
}

message SellToMerchantRequest {
    string seller_id = 1;
    string item = 2;
    int32 quantity = 3;
}

message PriceInfo {
    string item = 1;
    int32 price = 2;
}

message PriceList {
    repeated PriceInfo buy_prices = 1;  // 商人卖给玩家的价格
    repeated PriceInfo sell_prices = 2;  // 商人从玩家收购的价格
}

// ============ 中心化交易系统 ============

message CreateTradeRequest {
    string initiator_id = 1;
    string initiator_address = 2;
    string target_id = 3;
    string target_address = 4;
    string offer_type = 5;  // "buy" or "sell"
    string item = 6;
    int32 quantity = 7;
    int32 price = 8;
}

message CreateTradeResponse {
    bool success = 1;
    string message = 2;
    string trade_id = 3;
}

message TradeInfo {
    string trade_id = 1;
    string initiator_id = 2;
    string initiator_address = 3;
    string target_id = 4;
    string target_address = 5;
    string offer_type = 6;
    string item = 7;
    int32 quantity = 8;
    int32 price = 9;
    string status = 10;  // "pending", "accepted", "rejected", "completed"
    bool initiator_confirmed = 11;
    bool target_confirmed = 12;
}

message ListTradesRequest {
    string node_id = 1;
    string type = 2;  // "pending", "sent", "all"
}

message ListTradesResponse {
    repeated TradeInfo trades = 1;
}

message AcceptTradeRequest {
    string trade_id = 1;
    string node_id = 2;
}

message ConfirmTradeRequest {
    string trade_id = 1;
    string node_id = 2;
}

message CancelTradeRequest {
    string trade_id = 1;
    string node_id = 2;
}

message RejectTradeRequest {
    string trade_id = 1;
    string node_id = 2;
}

// 消息系统
message Message {
    string message_id = 1;
    string from = 2;
    string to = 3;
    string content = 4;
    string type = 5;  // 'private' or 'broadcast'
    int64 timestamp = 6;
    bool is_read = 7;
}

message SendMessageRequest {
    string target = 1;
    string content = 2;
    string type = 3;  // 'private' or 'broadcast'
}

message SendMessageResponse {
    bool success = 1;
    string message = 2;
    string message_id = 3;
}

message GetMessagesRequest {
    string node_id = 1;
}

message GetMessagesResponse {
    repeated Message messages = 1;
}

message MarkMessagesReadRequest {
    string node_id = 1;
    string message_id = 2;  // 可选，如果不提供则标记所有消息为已读
}

message MarkMessagesReadResponse {
    bool success = 1;
    string message = 2;
}

service MerchantNode {
    // 从商人处购买
    rpc BuyItem(BuyFromMerchantRequest) returns (Status);
    
    // 出售给商人
    rpc SellItem(SellToMerchantRequest) returns (Status);
    
    // 获取价格表
    rpc GetPrices(Empty) returns (PriceList);
    
    // 时间推进通知
    rpc OnTimeAdvance(TimeAdvanceNotification) returns (Status);
    
    // 中心化交易管理
    rpc CreateTrade(CreateTradeRequest) returns (CreateTradeResponse);
    rpc ListTrades(ListTradesRequest) returns (ListTradesResponse);
    rpc AcceptTrade(AcceptTradeRequest) returns (Status);
    rpc ConfirmTrade(ConfirmTradeRequest) returns (Status);
    rpc CancelTrade(CancelTradeRequest) returns (Status);
    rpc RejectTrade(RejectTradeRequest) returns (Status);
}

